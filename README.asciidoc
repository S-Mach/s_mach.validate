= s_mach.validate: Case class validators
Lance Gatlin <lance.gatlin@gmail.com>
v1,8-Jun-2015
:blogpost-status: unpublished
:blogpost-categories: s_mach, scala

+s_mach.validate+ is an open-source Scala library that provides methods for easily building reuseable, composable and serialization format agnostic validators for case classes. 

== Features
* Given an instance of a case class, validators can test one or more rules and produce a human-readable list of validation failures. Each failure includes the case class field path to the failure (similar to +play.api.libs.json.JsError+).
* Validators can output a light-weight schema for the case class, which includes a human-readable explanation of all possible validation failures and the expected type of each primitive field. 
* Validators return +List[Explain]+ which is serialization format agnostic. +List[Explain]+ can later be converted to any specific serialization format or schema. 
* Convenience methods and converters for working Play JSON are provided.

== Why do I need this?

* You want to write validation code once in a single place that can be reused in many places for various serialization formats
* You want a validation DSL that is light-weight, terse, reuseable and composable
* You want to be able to display a light-weight human-readable schema for case classes derived from the validation DSL 
* You want to be able to create case class instances that might contain invalid data (as opposed to construction based validation that prevents creating invalid instances) to allow fixing, serializing or transmitting structurally correct but possibly invalid data.

== Include in SBT
TODO

== Example

----

import play.api.libs.json._
import s_mach.validate.play_json._

type Name = String
val isName = {
  import Text._
  Validator.builder[String]
   .ensure(nonEmpty)
   .ensure(maxLength(64))
   .ensure(allLettersOrWhitespace)
   .build()
}

type Age = Int
val isAge =
  Validator.builder[Int]
   .ensure(s"must be between (0,150)") { age =>
     0 <= age && age <= 150
   }
   .build()

case class Person(id: Int, name: String, age: Int)

object Person {
  implicit val validator_Person =
    Validator.builder[Person]
      .field("id",_.id)()
      .field("name",_.name)(
        _.ensure(isName)
      )
      .field("age",_.age)(
        _.ensure(isAge)
      )
     .ensure("age plus id must be less than 1000")(p => p.id + p.age < 1000)
     .build()

  implicit val format_Person = Json.format[Person].withValidator
}

case class Family(
  father: Person,
  mother: Person,
  children: Seq[Person],
  grandMother: Option[Person],
  grandFather: Option[Person]
)

object Family {
  implicit val validator_Family =
    Validator.builder[Family]
      .field("father",_.father)()
      .field("mother",_.mother)()
      .field("children",_.children)()
      .field("grandMother",_.grandMother)()
      .field("grandFather",_.grandFather)()
      .ensure("father must be older than children") { family =>
        family.children.forall(_.age < family.father.age)
      }
      .ensure("mother must be older than children") { family =>
        family.children.forall(_.age < family.mother.age)
      }
      .build()
  implicit val format_Family = Json.format[Family].withValidator
}

----
