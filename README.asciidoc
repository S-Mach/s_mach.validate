= s_mach.validate: Case class validators
Lance Gatlin <lance.gatlin@gmail.com>
v1,8-Jun-2015
:blogpost-status: unpublished
:blogpost-categories: s_mach, scala

+s_mach.validate+ is an open-source Scala library that provides methods for easily building reuseable, composable and serialization format agnostic validators for case classes. 

== Features
* Given an instance of a case class, validators can test one or more rules and produce a human-readable list of validation failures. Each failure includes the case class field path to the failure (similar to +play.api.libs.json.JsError+).
* Validators can output a light-weight schema for the case class, which includes a human-readable explanation of all possible validation failures and the expected type of each primitive field. 
* Validators return +List[Explain]+ which is serialization format agnostic. +List[Explain]+ can later be converted to any specific serialization format or schema. 
* Convenience methods and converters for working Play JSON are provided.

== Why do I need this?

* You want to write validation code once in a single place that can be reused in many places for various serialization formats
* You want a validation DSL that is light-weight, terse, reuseable and composable
* You want to be able to display a light-weight human-readable schema for case classes derived from the validation DSL 
* You want to be able to create case class instances that might contain invalid data (as opposed to construction based validation that prevents creating invalid instances) to allow fixing, serializing or transmitting structurally correct but possibly invalid data.

== Include in SBT
TODO

== Example

----
Welcome to Scala version 2.11.6 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_40).
Type in expressions to have them evaluated.
Type :help for more information.

scala> :paste
// Entering paste mode (ctrl-D to finish)

import play.api.libs.json._
import s_mach.validate.play_json._

val isName = {
  import Text._
  Validator.builder[String]
   .ensure(nonEmpty)
   .ensure(maxLength(64))
   .ensure(allLettersOrWhitespace)
   .build()
}

val isAge =
  Validator.builder[Int]
   .ensure(s"must be between (0,150)") { age =>
     0 <= age && age <= 150
   }
   .build()

case class Person(id: Int, name: String, age: Int)

object Person {
  implicit val validator_Person =
    Validator.builder[Person]
      .field("id",_.id)()
      .field("name",_.name)(
        _.ensure(isName)
      )
      .field("age",_.age)(
        _.ensure(isAge)
      )
     .ensure("age plus id must be less than 1000")(p => p.id + p.age < 1000)
     .build()

  implicit val format_Person = Json.format[Person].withValidator
}

// Exiting paste mode, now interpreting.

import s_mach.validate._
import play.api.libs.json._
import s_mach.validate.play_json._
defined type alias Name
isName: s_mach.validate.Validator[String] = CompositeValidator(List(EnsureValidator(must contain only letters or whitespace,<function1>), EnsureValidator(must not be longer than 64 characters,<function1>), EnsureValidator(must not be empty,<function1>), SchemaValidator(Schema(List(),java.lang.String,(1,1)))))
defined type alias Age
isAge: s_mach.validate.Validator[Int] = CompositeValidator(List(EnsureValidator(must be between (0,150),<function1>), SchemaValidator(Schema(List(),Int,(1,1)))))
defined class Person
defined object Person

scala> Person(1,"chad!!!",200)
res0: Person = Person(1,chad!!!,200)

scala> res0.validate
res1: List[s_mach.validate.Rule] = List(age: must be between (0,150), name: must contain only letters or whitespace)

scala> Json.toJson(res0)
res2: play.api.libs.json.JsValue = {"id":1,"name":"chad!!!","age":200}

scala> Json.fromJson[Person](res2)
res3: play.api.libs.json.JsResult[Person] = JsError(ArrayBuffer((/age,List(ValidationError(must be between (0,150),WrappedArray()))), (/name,List(ValidationError(must contain only letters or whitespace,WrappedArray())))))

scala> validator[Person].explain.prettyPrintJson
res4: String =
{
  "name" : [ "must be string", "must not be empty", "must not be longer than 64 characters", "must contain only letters or whitespace" ],
  "age" : [ "must be integer", "must be between (0,150)" ],
  "id" : [ "must be integer" ],
  "this" : "age plus id must be less than 1000"
}

----
